/*
 * This defines a custom widget which displays number of words and characters in a current text note.
 * To be activated for a given note, add label 'wordCount' to the note, you can also make it inheritable and thus activate it for the whole subtree.
 * 
 * See it in action in "Books" and its subtree.
 */
const TPL = `
<div style="padding: 10px; border-top: 1px solid var(--main-border-color); contain: none;>
    <script id="synthConfig" type="application/json">
    {
        "_vars": {
            "_COMMENT_KNOBS": "KNOBS VARS",
            "ocsY": 0.576,
            "ocs1ParamX": 0.050,
            "ocs2ParamX": 0.1685,
            "row0Y":    0.862,
            "row1Y":    0.730,
            "row2Y":    0.60,
            "row3Y":    0.468,
            "column0X": 0.262,
            "column1X": 0.3235,
            "column2X": 0.385,
            "column3X": 0.4468,
            "column4X": 0.5085,
            "column5X": 0.57,
            "column6X": 0.6315,
            "column7X": 0.6933,
            "knobMinAngle": -152,
            "knobMaxAngle": 152,
            "knobDefaultValue": 0.5,

            "_COMMENT_JACKS": "JACKS VARS",
            "jackColumn0X": 0.7627,
            "jackColumn1X": 0.7965666667,
            "jackColumn2X": 0.8304333333,
            "jackColumn3X": 0.8643,
            "jackColumn4X": 0.8981666667,
            "jackColumn5X": 0.9320333333,
            "jackColumn6X": 0.9659,
            "jackRow0Y": 0.495,
            "jackRow1Y": 0.5535714286,
            "jackRow2Y": 0.6121428571,
            "jackRow3Y": 0.6707142857,
            "jackRow4Y": 0.7292857143,
            "jackRow5Y": 0.7878571428,
            "jackRow6Y": 0.8464285714,
            "jackRow7Y": 0.905
        },
        "knobs": [
            { "id": "osc1-tune",     "x": "{{ocs1ParamX}}",  "y": "{{ocsY}}",  "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc1-shape",    "x": "{{ocs1ParamX}}",  "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc1-width",    "x": "{{ocs1ParamX}}",  "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc2-tune",     "x": "{{ocs2ParamX}}",  "y": "{{ocsY}}",  "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc2-shape",    "x": "{{ocs2ParamX}}",  "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc2-width",    "x": "{{ocs2ParamX}}",  "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "osc-mix",       "x": 0.109,             "y": 0.5145,      "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "vcf-freq",      "x": "{{column0X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "vcf-reso",      "x": "{{column0X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "vcf-mod-depth", "x": "{{column0X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "vcf-env-depth", "x": "{{column0X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "lfo-shape",     "x": 0.354,             "y": "{{ocsY}}",  "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "lfo-rate",      "x": "{{column2X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "noise",         "x": "{{column1X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "vca-bias",      "x": "{{column1X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env1-attack",   "x": "{{column2X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env1-decay",    "x": "{{column3X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env1-sustain",  "x": "{{column4X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env1-release",  "x": "{{column5X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env2-attack",   "x": "{{column2X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env2-decay",    "x": "{{column3X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env2-sustain",  "x": "{{column4X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "env2-release",  "x": "{{column5X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "delay-time",    "x": "{{column3X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "delay-repeats", "x": "{{column4X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "delay-mix",     "x": "{{column5X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "od-drive",      "x": "{{column3X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "od-tone",       "x": "{{column4X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "od-level",      "x": "{{column5X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "output-volume", "x": "{{column6X}}",    "y": "{{row3Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "sh-rate",       "x": "{{column6X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "sh-glide",      "x": "{{column7X}}",    "y": "{{row2Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "srl-slew",      "x": "{{column6X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "srl-time",      "x": "{{column7X}}",    "y": "{{row1Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "attenuator1",   "x": "{{column6X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" },
            { "id": "attenuator2",   "x": "{{column7X}}",    "y": "{{row0Y}}", "value": "{{knobDefaultValue}}", "minAngle": "{{knobMinAngle}}", "maxAngle": "{{knobMaxAngle}}" }
        ],
        
        "buttons": [
            { "id": "osc1-range-8",       "x": 0.108,  "y": 0.655,  "state": false },
            { "id": "osc1-range-16",      "x": 0.108,  "y": 0.687,  "state": false },
            { "id": "osc1-range-32",      "x": 0.108,  "y": 0.721,  "state": false },
            { "id": "osc2-range-8",       "x": 0.1345, "y": 0.655,  "state": false },
            { "id": "osc2-range-16",      "x": 0.1345, "y": 0.687,  "state": false },
            { "id": "osc2-range-32",      "x": 0.1345, "y": 0.721,  "state": false },
            { "id": "osc-sync",           "x": 0.12,   "y": 0.84,   "state": false },
            { "id": "paraphonic",         "x": 0.12,   "y": 0.9,    "state": false },
            { "id": "vcf-mode-low-cut",   "x": 0.235,  "y": 0.54,   "state": false },
            { "id": "vcf-mode-band-pass", "x": 0.235,  "y": 0.568,  "state": false },
            { "id": "vcf-mode-high-cut",  "x": 0.235,  "y": 0.596,  "state": true  },
            { "id": "vcf-key-track",      "x": 0.2745, "y": 0.695,  "state": false },
            { "id": "lfo-key-sync",       "x": 0.336,  "y": 0.491,  "state": false }
        ],
        
        "jacks": [
            { "id": "in-osc1",       "x": "{{jackColumn0X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "in-osc2",       "x": "{{jackColumn1X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "in-osc12",      "x": "{{jackColumn2X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "in-invert-in",  "x": "{{jackColumn3X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "out-ocs1",      "x": "{{jackColumn4X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "out-ocs2",      "x": "{{jackColumn5X}}", "y": "{{jackRow0Y}}", "connections": [] },
            { "id": "out-ocs-mix",   "x": "{{jackColumn6X}}", "y": "{{jackRow0Y}}", "connections": [] },

            { "id": "in-shape1",     "x": "{{jackColumn0X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "in-shape2",     "x": "{{jackColumn1X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "in-pw1",        "x": "{{jackColumn2X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "in-pw2",        "x": "{{jackColumn3X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "out-vcf1",      "x": "{{jackColumn4X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "out-vcf2",      "x": "{{jackColumn5X}}", "y": "{{jackRow1Y}}", "connections": [] },
            { "id": "out-overdrive", "x": "{{jackColumn6X}}", "y": "{{jackRow1Y}}", "connections": [] },

            { "id": "in-vcf",        "x": "{{jackColumn0X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "in-freq-mod",   "x": "{{jackColumn1X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "in-res",        "x": "{{jackColumn2X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "in-overdrive",  "x": "{{jackColumn3X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "out-vca",       "x": "{{jackColumn4X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "out-output",    "x": "{{jackColumn5X}}", "y": "{{jackRow2Y}}", "connections": [] },
            { "id": "out-onoise",    "x": "{{jackColumn6X}}", "y": "{{jackRow2Y}}", "connections": [] },

            { "id": "in-vca",        "x": "{{jackColumn0X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "in-vca-cv",     "x": "{{jackColumn1X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "in-delay",      "x": "{{jackColumn2X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "in-delay-time", "x": "{{jackColumn3X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "out-env1",      "x": "{{jackColumn4X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "out-env2",      "x": "{{jackColumn5X}}", "y": "{{jackRow3Y}}", "connections": [] },
            { "id": "out-invert",    "x": "{{jackColumn6X}}", "y": "{{jackRow3Y}}", "connections": [] },

            { "id": "in-e-gate1",    "x": "{{jackColumn0X}}", "y": "{{jackRow4Y}}", "connections": [] },
            { "id": "in-e-gate2",    "x": "{{jackColumn1X}}", "y": "{{jackRow4Y}}", "connections": [] },
            { "id": "in-sh",         "x": "{{jackColumn2X}}", "y": "{{jackRow4Y}}", "connections": [] },    
            { "id": "in-sh-clock",   "x": "{{jackColumn3X}}", "y": "{{jackRow4Y}}", "connections": [] },
            { "id": "out-lfo",       "x": "{{jackColumn4X}}", "y": "{{jackRow4Y}}", "connections": [] },
            { "id": "out-lfo-uni",   "x": "{{jackColumn5X}}", "y": "{{jackRow4Y}}", "connections": [] },
            { "id": "out-sh",        "x": "{{jackColumn6X}}", "y": "{{jackRow4Y}}", "connections": [] },    

            { "id": "in-lfo-rate",   "x": "{{jackColumn0X}}", "y": "{{jackRow5Y}}", "connections": [] },
            { "id": "in-lfo-shape",  "x": "{{jackColumn1X}}", "y": "{{jackRow5Y}}", "connections": [] },
            { "id": "in-lfo-trig",   "x": "{{jackColumn2X}}", "y": "{{jackRow5Y}}", "connections": [] },    
            { "id": "in-mult",       "x": "{{jackColumn3X}}", "y": "{{jackRow5Y}}", "connections": [] },
            { "id": "out-mult1",     "x": "{{jackColumn4X}}", "y": "{{jackRow5Y}}", "connections": [] },
            { "id": "out-mult2",     "x": "{{jackColumn5X}}", "y": "{{jackRow5Y}}", "connections": [] },
            { "id": "out-midi-gate", "x": "{{jackColumn6X}}", "y": "{{jackRow5Y}}", "connections": [] },

            { "id": "in-att1",       "x": "{{jackColumn0X}}", "y": "{{jackRow6Y}}", "connections": [] },
            { "id": "in-att1-cv",    "x": "{{jackColumn1X}}", "y": "{{jackRow6Y}}", "connections": [] },
            { "id": "in-att2",       "x": "{{jackColumn2X}}", "y": "{{jackRow6Y}}", "connections": [] },    
            { "id": "in-slew-in",    "x": "{{jackColumn3X}}", "y": "{{jackRow6Y}}", "connections": [] },
            { "id": "out-att1",      "x": "{{jackColumn4X}}", "y": "{{jackRow6Y}}", "connections": [] },
            { "id": "out-att2",      "x": "{{jackColumn5X}}", "y": "{{jackRow6Y}}", "connections": [] },
            { "id": "out-slew",      "x": "{{jackColumn6X}}", "y": "{{jackRow6Y}}", "connections": [] },

            { "id": "in-sum-1-a",    "x": "{{jackColumn0X}}", "y": "{{jackRow7Y}}", "connections": [] },
            { "id": "in-sum-1-b",    "x": "{{jackColumn1X}}", "y": "{{jackRow7Y}}", "connections": [] },
            { "id": "in-sum-2-a",    "x": "{{jackColumn2X}}", "y": "{{jackRow7Y}}", "connections": [] },    
            { "id": "in-sum-2-b",    "x": "{{jackColumn3X}}", "y": "{{jackRow7Y}}", "connections": [] },
            { "id": "out-sum1",      "x": "{{jackColumn4X}}", "y": "{{jackRow7Y}}", "connections": [] },
            { "id": "out-sum2",      "x": "{{jackColumn5X}}", "y": "{{jackRow7Y}}", "connections": [] },
            { "id": "out-assign",    "x": "{{jackColumn6X}}", "y": "{{jackRow7Y}}", "connections": [] }
        ],
        "backgroundImagePath": "http://127.0.0.1:37840/custom/synth/synth-background.jpg"
    }
    </script>
    <script src="http://127.0.0.1:37840/custom/synth/synth-preset-handler.js"></script>
    <synth-preset-handler configId='synthConfig' isTrilium='true'></synth-preset-handler>
</div>`;

class NeutronPresetWidget extends api.NoteContextAwareWidget 
{
    static get parentWidget() { return 'center-pane'; }

    get position() { return 100; } // higher value means position towards the bottom/right

    isEnabled() 
    {       
        return super.isEnabled()
            && (
            ((this.note.type === 'text' || this.note.type === 'book')  && this.note.hasLabel('neutronPresetWidget')) || (this.note.type === 'file' && this.note.mime === "application/x-neutron-preset-json"));
    }

    doRender() 
    {
        this.$widget = $(TPL);
        this.$neutronPresetHandler = this.$widget.find('synth-preset-handler');
        this.$comboAttachments = this.$widget.find("#comboAttachments");

        this.comboAttachmentsOnChangeListenerIsAdded = false;
        return this.$widget;
    }

    async refreshWithNote(note) 
    {
        if(!this.comboAttachmentsOnChangeListenerIsAdded && this.$neutronPresetHandler[0].isInitialized)
        {
            this.$neutronPresetHandler[0].elements.presetComboAttachment.onchange = (event) => this.loadlPresetFromComboAttachment(event);
            this.comboAttachmentsOnChangeListenerIsAdded = true;
        }

        const {content} = await note.getNoteComplement();
        this.$neutronPresetHandler[0].api = api;
        this.$neutronPresetHandler[0].currentNote = note;
        this.$neutronPresetHandler[0].initSynth();

        await this.fillDropdownWithOptions(note);
    }
    
    async fillDropdownWithOptions(note)
    {
        const optionsTemplate = "<option value=\"$$VALUE_REPLACER$$\">$$TEXT_REPLACER$$</option>";
        const valueReplacer = "$$VALUE_REPLACER$$";
        const textReplacer = "$$TEXT_REPLACER$$";
        
        this.attachments = await note.getAttachments();
        this.currentNoteId = note.noteId;
        var loadingOptions = "";
        const currentNoteIsNeutronPresetFile = note.type == "file" && (note.mime == "application/x-neutron-preset-json");
        if(currentNoteIsNeutronPresetFile)
        {
           const midiName = note.title;
           loadingOptions = loadingOptions + optionsTemplate.replace(valueReplacer, "CURRENT_NOTE_" + midiName).replace(textReplacer, midiName);
        }

        loadingOptions = loadingOptions + optionsTemplate.replace(valueReplacer, "").replace(textReplacer, "select file");
        for(var j = 0; j < this.attachments.length; j++)
        {
            const attachmentTitle = this.attachments[j].title;
            if(attachmentTitle.endsWith(".ntr"))
            {
                const midiName = attachmentTitle;
                if(midiName == "")
                    continue;
                const optionToAdd = optionsTemplate.replace(valueReplacer, "ATTACHMENT_" + midiName).replace(textReplacer, midiName);
                loadingOptions = loadingOptions + optionToAdd;
            }
        }
        
        var childNotes = await this.note.getChildNotes();
        for(j = 0; j < childNotes.length; j++)
        {
        	const childText = childNotes[j].getNoteComplement();
            const attachmentTitle = childNotes[j].title;
            if(attachmentTitle.endsWith(".ntr"))
            {
                const midiName = attachmentTitle;
                if(midiName == "")
                    continue;
                const optionToAdd = optionsTemplate.replace(valueReplacer, "FILE_CHILD_" + midiName).replace(textReplacer, midiName);
                loadingOptions = loadingOptions + optionToAdd;
            }
        }

        var attributes = note.getAttributes();
        var noteId =  note.id;
        this.neutronPresetSpecialURLPath = note.getLabelValue("neutronPresetSpecialURLPath");
        var neutronPresetSpecialURLNames = note.getLabelValue("neutronPresetSpecialURLNames");
        if(neutronPresetSpecialURLNames != undefined)
        {
            neutronPresetSpecialURLNames = neutronPresetSpecialURLNames.trim();
            var splittedMidiURLNames = neutronPresetSpecialURLNames.split(";");
            for(var i = 0; i < splittedMidiURLNames.length; i++)
            {
                const midiName = splittedMidiURLNames[i].trim();
                if(midiName == "")
                    continue;
                const optionToAdd = optionsTemplate.replace(valueReplacer, "CUSTOM_RESOURCE_" + midiName).replace(textReplacer, midiName);
                loadingOptions = loadingOptions + optionToAdd;
            }
        }
                 
        this.$neutronPresetHandler[0].elements.presetComboAttachment.innerHTML = loadingOptions;
        
        if(currentNoteIsNeutronPresetFile)
        {
            const path = "http://127.0.0.1:37840/api/notes/" + this.note.noteId + "/download?";
        	console.log("loading URL: " + path);
        	this.$neutronPresetHandler[0].loadFileURL(path); 
        }    
    }

    async loadlPresetFromComboAttachment(event)
    {
        const value = event.target.value;  
        if(value != "")
        {
            if(value.startsWith("CURRENT_NOTE_"))
            {
               const path = "http://127.0.0.1:37840/api/notes/" + this.note.noteId + "/download?";
               //const path = "#root/api/notes/" + this.note.noteId + "/download?";
               console.log("loading URL: " + path);
               this.$neutronPresetHandler[0].loadFileURL(path);
            }
            else if(value.startsWith("ATTACHMENT_"))
            {
                const compareValue = value.replace("ATTACHMENT_", "");
                for(var i = 0; i < this.note.attachments.length; i++)
                {
                    if(compareValue == this.note.attachments[i].title)
                    {
                        const path = "http://127.0.0.1:37840/api/attachments/" + this.note.attachments[i].attachmentId + "/download?";
                        console.log("loading URL: " + path);
                        this.$neutronPresetHandler[0].loadFileURL(path);
                        break;
                    }
                }
            }
            else if(value.startsWith("FILE_CHILD_"))
            {
                const compareValue = value.replace("FILE_CHILD_", "");
                var childNotes = await this.note.getChildNotes();
                for(i = 0; i < childNotes.length; i++)
                {
                    if(compareValue == childNotes[i].title)
                    {
                        const path = "http://127.0.0.1:37840/api/notes/" + childNotes[i].noteId + "/download?";
                        console.log("loading URL: " + path);
                        this.$neutronPresetHandler[0].loadFileURL(path);
                        break;
                    }
                }
            }
            else if(value.startsWith("CUSTOM_RESOURCE_"))
            {
                const unwrappedPath = value.replace("CUSTOM_RESOURCE_", "");
                const path = "http://127.0.0.1:37840/custom/" + this.neutronPresetSpecialURLPath + unwrappedPath;
            	console.log("loading URL: " + path);
            	this.$neutronPresetHandler[0].loadFileURL(path);
            }
        }
        console.log(value);
    }

    // async copyToClipboard()
    // {
    //     const jsonData = {your: "data"}; // Your widget's generated data
    //     const jsonString = JSON.stringify(jsonData, null, 2);

    //     const textarea = document.createElement("textarea");
    //     textarea.value = jsonString;
    //     document.body.appendChild(textarea);
    //     textarea.select();
    //     document.execCommand("copy");
    //     document.body.removeChild(textarea);
        
    //     await api.showMessage("Neutron preset is copied to clipboard! Save it to text file with .ntr extension on disk");
    // }
}

module.exports = NeutronPresetWidget;